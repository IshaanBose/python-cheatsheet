(this["webpackJsonppython-cheatsheet"]=this["webpackJsonppython-cheatsheet"]||[]).push([[0],[,,,,function(e,s,c){},function(e,s,c){},,,,,,function(e,s,c){},,function(e,s,c){},function(e,s,c){"use strict";c.r(s);var a=c(2),n=c(1),t=c(6),r=c.n(t),j=(c(11),c(0)),l=function(e){var s=Object(n.useState)(!1),c=Object(a.a)(s,2),t=c[0],r=c[1],l=Object(n.useState)(!1),i=Object(a.a)(l,2),b=i[0],d=i[1];return Object(j.jsxs)("div",{className:"row",id:"root-main",children:[Object(j.jsx)("div",{className:"col-xl-4 col-lg-4"}),Object(j.jsx)("div",{id:"root",className:"col-xl-4 col-lg-4 col-sm-12 col-md-12 col-12",children:Object(j.jsx)("div",{id:"main-circle",className:b?"main-circle animate-main-circle":"main-circle main-circle-hover",onMouseOver:function(){r(!0)},onMouseOut:function(){r(!1)},onClick:function(){d(!0),setTimeout((function(){e.mainActive(!1)}),1200)},children:Object(j.jsxs)("div",{id:"main-text-content",className:b?"text-content text-content-hide":"text-content",children:[Object(j.jsx)("h1",{children:Object(j.jsx)("b",{children:"Python Cheatsheet"})}),Object(j.jsx)("h4",{children:"By Ishaan Bose"}),Object(j.jsx)("h4",{children:"Registration No.: 2147116"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{id:"click-text",className:t?"click-text-disp":"click-text",children:"Click to see cheat sheet!"})]})})}),Object(j.jsx)("div",{className:"col-xl-4 col-lg-4"})]})},i=(c(4),function(e){var s=Object(n.useState)(!1),c=Object(a.a)(s,2),t=c[0],r=c[1];return Object(j.jsx)("div",{className:"col-lg-4",children:Object(j.jsx)("div",{className:"topic-".concat(e.type.toLowerCase()),onMouseOver:function(){r(!0)},onMouseOut:function(){r(!1)},onClick:function(){e.showPage({showPage:!0,subject:e.type})},children:Object(j.jsx)("div",{className:t?function(){switch(e.type){case"Functions":return"text-content-hover-funcs";case"Dictionaries":return"text-content-hover-dicts";default:return"text-content-hover-gen"}}():"text-content",children:e.type})})})}),b=function(e){var s=Object(n.useState)(!1),c=Object(a.a)(s,2),t=c[0],r=c[1];return Object(n.useEffect)((function(){var e=setTimeout((function(){r(!0)}),100);return function(){e&&clearTimeout(e)}}),[]),Object(j.jsxs)("div",{className:t?"sub-topics-container-disp":"sub-topics-container",children:[Object(j.jsxs)("div",{className:"row",children:[Object(j.jsx)(i,{type:"Lists",showPage:e.showPage}),Object(j.jsx)(i,{type:"Strings",showPage:e.showPage}),Object(j.jsx)(i,{type:"Tuples",showPage:e.showPage})]}),Object(j.jsxs)("div",{className:"row",children:[Object(j.jsx)("div",{className:"col-lg-4"}),Object(j.jsx)(i,{type:"Basics",showPage:e.showPage}),Object(j.jsx)("div",{className:"col-lg-4"})]}),Object(j.jsxs)("div",{className:"row",children:[Object(j.jsx)(i,{type:"Classes",showPage:e.showPage}),Object(j.jsx)(i,{type:"Functions",showPage:e.showPage}),Object(j.jsx)(i,{type:"Dictionaries",showPage:e.showPage})]})]})},d=(c(5),function(){return Object(j.jsxs)("div",{children:[Object(j.jsx)("div",{className:"content-subtopic",children:"About Python"}),Object(j.jsxs)("ul",{children:[Object(j.jsx)("li",{children:"Desgined by Guido van Rossum"}),Object(j.jsx)("li",{children:"Python is an interpreted, interactive, object-oriented programming language"}),Object(j.jsx)("li",{children:"Python can be treated in a procedural way, an object-oriented way or a functional way"})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Comments"}),Object(j.jsx)("div",{className:"code-container",children:Object(j.jsxs)("div",{className:"string",children:[Object(j.jsx)("span",{className:"comment",children:"# This is a single-line comment"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"'''",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"comment",children:"This is a multi-line comment"}),Object(j.jsx)("br",{}),"'''",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),'"""',Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"comment",children:"This is also an example of multi-line comment"}),Object(j.jsx)("br",{}),'"""']})}),Object(j.jsx)("div",{className:"content-subtopic",children:"Variables"}),"Unlike most languages, Python does not explicitly define a variable's data type.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"comment",children:"# These are all valid variables"}),Object(j.jsx)("br",{}),"x = ",Object(j.jsx)("span",{className:"number",children:"10"})," ",Object(j.jsx)("span",{className:"comment",children:"# this is a variable of type int"}),Object(j.jsx)("br",{}),"y = ",Object(j.jsx)("span",{className:"string",children:'"Hello world"'})," ",Object(j.jsx)("span",{className:"comment",children:"# this is a variable of type string"})]}),"Python supports multiple variable assignment",Object(j.jsxs)("div",{className:"code-container",children:["var1, var2, var3 = ",Object(j.jsx)("span",{className:"number",children:"10"}),", ",Object(j.jsx)("span",{className:"string",children:"'var2'"}),", ",Object(j.jsx)("span",{className:"number",children:"1.28"}),Object(j.jsx)("span",{className:"comment",children:" # equivalent to: var1 = 10 var2 = 'var2' var3 = 1.28"}),Object(j.jsx)("br",{}),"item1, item2 = [",Object(j.jsx)("span",{className:"string",children:"'A'"}),", ",Object(j.jsx)("span",{className:"string",children:"'B'"}),"]",Object(j.jsx)("span",{className:"comment",children:" # equivalent to: item1 = 'A' item2 = 'B'"}),Object(j.jsx)("br",{}),"a = b = c = ",Object(j.jsx)("span",{className:"number",children:"100"}),Object(j.jsx)("span",{className:"comment",children:" # assigns 100 to all the variables"})]}),"Python also allows for more advanced unpacking of lists and tuples.",Object(j.jsxs)("div",{className:"code-container",children:["a, *b = [",Object(j.jsx)("span",{className:"number",children:"1"}),", ",Object(j.jsx)("span",{className:"number",children:"2"}),", ",Object(j.jsx)("span",{className:"number",children:"3"}),", ",Object(j.jsx)("span",{className:"number",children:"4"}),"]",Object(j.jsx)("span",{className:"comment",children:" # this gives us a = 1 and b = [2, 3, 4]"}),Object(j.jsx)("br",{}),"a, *b = (",Object(j.jsx)("span",{className:"number",children:"1"}),", ",Object(j.jsx)("span",{className:"number",children:"2"}),", ",Object(j.jsx)("span",{className:"number",children:"3"}),", ",Object(j.jsx)("span",{className:"number",children:"4"}),")",Object(j.jsx)("span",{className:"comment",children:" # same as above"}),Object(j.jsx)("br",{}),"a, *b, c = (",Object(j.jsx)("span",{className:"number",children:"1"}),", ",Object(j.jsx)("span",{className:"number",children:"2"}),", ",Object(j.jsx)("span",{className:"number",children:"3"}),", ",Object(j.jsx)("span",{className:"number",children:"4"}),")",Object(j.jsx)("span",{className:"comment",children:" # this gives us a = 1, b = [2, 3] and c = 4"})]}),"You can also unpack dictionaries, however this will only allow us to access its keys but not its values.",Object(j.jsxs)("div",{className:"code-container",children:["a, b = { ",Object(j.jsx)("span",{className:"string",children:"'key1'"}),": ",Object(j.jsx)("span",{className:"number",children:"10"}),", ",Object(j.jsx)("span",{className:"string",children:"'key2'"}),": ",Object(j.jsx)("span",{className:"number",children:"20.12"})," }",Object(j.jsx)("span",{className:"comment",children:" # this gives us a = 'key1' and b = 'key2', we cannot unpack the values"})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Variable Scope"}),"The scope of a variable in Python extends from the first assignment of the variable until the end of its block. A block in Python is defined by functions and classes rather than indentation. So a variable assigned in the an if statement or loop statements, can still be accessed after the end of the statements. For example:",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword",children:"if"})," ",Object(j.jsx)("span",{className:"literal",children:"True"}),":",Object(j.jsx)("br",{}),"\u2003i = ",Object(j.jsx)("span",{className:"number",children:"10"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i)",Object(j.jsx)("span",{className:"comment",children:" # this will print 10, despite i never being assigned a value before the if the statement"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword",children:"for"})," j ",Object(j.jsx)("span",{className:"keyword",children:"in"})," ",Object(j.jsx)("span",{className:"function-call",children:"range"}),"(",Object(j.jsx)("span",{className:"number",children:"3"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"continue"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(j) ",Object(j.jsx)("span",{className:"comment",children:"# this will print 2"})]}),"A variable defined inside a function cannot be accessed outside of it.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo():",Object(j.jsx)("br",{}),"\u2003local = ",Object(j.jsx)("span",{className:"number",children:"10"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(local)",Object(j.jsx)("span",{className:"comment",children:" # this gives us a NameError as local is not defined outside of function foo()"})]}),"A variable defined outside of a function can be accessed inside it. However, assigning a value to the variable will convert it to a local variable, meaning the value will only be changed for that variable inside of the function and not outside of it. This also means that if you accessed the local variable's value before the assignment, Python will throw an UnboundLocalError.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo1():",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo2():",Object(j.jsx)("br",{}),"\u2003i = ",Object(j.jsx)("span",{className:"number",children:"0"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo3():",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i)",Object(j.jsx)("br",{}),"\u2003i = ",Object(j.jsx)("span",{className:"number",children:"1"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"i = ",Object(j.jsx)("span",{className:"number",children:"10"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo1"}),"()",Object(j.jsx)("span",{className:"comment",children:" # this will print 10 (value of global variable i)"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo2"}),"()",Object(j.jsx)("span",{className:"comment",children:" # this will print 0 (value of local variable i)"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i)",Object(j.jsx)("span",{className:"comment",children:" # this will print 10, showing that foo2 did not change the value of the global variable"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo3"}),"()",Object(j.jsx)("span",{className:"comment",children:" # this will give us an UnboundLocalError"}),Object(j.jsx)("br",{})]}),"You can access variables that are not in the scope of a function using ",Object(j.jsx)("code",{children:"global"})," or ",Object(j.jsx)("code",{children:"nonlocal"})," keywords.",Object(j.jsx)("code",{children:" global"})," allows us to access variables defined in the global scope (outside any functions or classes), whereas ",Object(j.jsx)("code",{children:"nonlocal "}),"allows us to access variables defined in the outer scope with relation to the current scope.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," outer():",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"global "}),"global_var",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:"'global_var before change inside outer():'"}),", global_var)",Object(j.jsx)("br",{}),"\u2003global_var = ",Object(j.jsx)("span",{className:"number",children:"1"}),Object(j.jsx)("br",{}),"\u2003outer_var = ",Object(j.jsx)("span",{className:"number",children:"2"}),Object(j.jsx)("br",{}),"\u2003outer_var2 = ",Object(j.jsx)("span",{className:"string",children:"'a'"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," inner():",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"keyword",children:"global "}),"global_var",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"keyword",children:"nonlocal "}),"outer_var",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"global_var inside inner():"'}),", global_var)",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"outer_var before change inside inner():"'}),", outer_var)",Object(j.jsx)("br",{}),"\u2003\u2003outer_var = ",Object(j.jsx)("span",{className:"number",children:"9"}),Object(j.jsx)("br",{}),"\u2003\u2003outer_var2 = ",Object(j.jsx)("span",{className:"string",children:"'b'"}),Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"outer_var2 in inner()"'}),", outer_var2)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"inner"}),"()",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"outer_var after change:"'}),", outer_var)",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"outer_var2 after inner():"'}),", outer_var2)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"global_var = ",Object(j.jsx)("span",{className:"number",children:"10"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"outer"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:"'global_var after outer():'"}),", global_var)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:"'''"}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["This gives us the following output:",Object(j.jsx)("br",{}),"global_var before change inside outer(): 10",Object(j.jsx)("br",{}),"global_var inside inner(): 1",Object(j.jsx)("br",{}),"outer_var before change inside inner(): 2",Object(j.jsx)("br",{}),"outer_var2 in inner() b",Object(j.jsx)("br",{}),"outer_var after change: 9",Object(j.jsx)("br",{}),"outer_var2 after inner(): a",Object(j.jsx)("br",{}),"global_var after outer(): 1"]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:"'''"}),Object(j.jsx)("br",{})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Ternary Operator"}),"Python supports ternary operators with this format: ",Object(j.jsx)("code",{children:"<expression> if <condition> else <expression>"}),". For example:",Object(j.jsxs)("div",{className:"code-container",children:["a, b = ",Object(j.jsx)("span",{className:"number",children:"10"}),", ",Object(j.jsx)("span",{className:"number",children:"9"}),Object(j.jsx)("br",{}),"max_val = a",Object(j.jsx)("span",{className:"keyword",children:" if "}),"a > b",Object(j.jsx)("span",{className:"keyword",children:" else "})," b",Object(j.jsx)("span",{className:"comment",children:" # assigns value of a to max_val"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"comment",children:"# You can also call functions from ternanry operators"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo"}),"()",Object(j.jsx)("span",{className:"keyword",children:" if "}),"a > b",Object(j.jsx)("span",{className:"keyword",children:" else "})," ",Object(j.jsx)("span",{className:"function-call",children:"foo1"}),"()",Object(j.jsx)("span",{className:"comment",children:" # This calls foo() if a > b, otherwise it calls foo1()"})]})]})}),o=function(){return Object(j.jsxs)("div",{children:[Object(j.jsx)("div",{className:"content-subtopic",children:"Multiline Strings"}),"Python allows us to declare multiline strings using \"\"\" or '''. Multiline strings keep line breaks as they were present while declaring the string.",Object(j.jsxs)("div",{className:"code-container",children:["a =",Object(j.jsxs)("span",{className:"string",children:[' """This is the first line.',Object(j.jsx)("br",{}),'Notice how line breaks are preserved during printing."""']}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(a)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"This is the first line.",Object(j.jsx)("br",{}),"Notice how line breaks are preserved during printing."]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),"After the first set of quotes, all whitespaces are preserved as they are present in the code. This means that if you create a multiline string inside a function, if statement, or anything that requires indentation from Python interpreter, the tab spaces will also be present in the string. For example:",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo():",Object(j.jsx)("br",{}),"\u2003a = ",Object(j.jsxs)("span",{className:"string",children:["'''First line",Object(j.jsx)("br",{}),"\u2003\u2003extra indented line",Object(j.jsx)("br",{}),"\u2003function level indentation",Object(j.jsx)("br",{}),"no indentation",Object(j.jsx)("br",{}),"\u2003'''"]}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(a)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"First line",Object(j.jsx)("br",{}),"\u2003\u2003extra indented line",Object(j.jsx)("br",{}),"\u2003function level indentation",Object(j.jsx)("br",{}),"no indentation",Object(j.jsx)("br",{})]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),"If you want to define a string that spans multiple lines but does not retain whitespaces or line breaks, you can place the string inside parenthesis. For example:",Object(j.jsxs)("div",{className:"code-container",children:["long_str = (",Object(j.jsx)("br",{}),"\u2003",Object(j.jsxs)("span",{className:"string",children:['"First string."',Object(j.jsx)("br",{}),'\u2003"Second string."',Object(j.jsx)("br",{}),'\u2003\u2003"\\nNotice how tab does not affect the string"',Object(j.jsx)("br",{})]}),")",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(long_str)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"First string.Second string.",Object(j.jsx)("br",{}),"Notice how tab does not affect the string"]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"String Slicing"}),"String slicing follows the format of ",Object(j.jsx)("code",{children:"string[start:end:jump]"}),".",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"s = ",Object(j.jsx)("span",{className:"string",children:'"0123456789"'}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"s[:]",Object(j.jsx)("br",{}),"'0123456789'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"s[::",Object(j.jsx)("span",{className:"number",children:"3"}),"]",Object(j.jsx)("br",{}),"'0369'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"s[::",Object(j.jsx)("span",{className:"number",children:"-2"}),"]",Object(j.jsx)("br",{}),"'97531'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"s[",Object(j.jsx)("span",{className:"number",children:"-5"}),":",Object(j.jsx)("span",{className:"number",children:"-2"}),"]",Object(j.jsx)("br",{}),"'567'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"s[",Object(j.jsx)("span",{className:"number",children:"2"}),":",Object(j.jsx)("span",{className:"number",children:"8"}),"]",Object(j.jsx)("br",{}),"'234567'"]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Formatting Strings"}),"Python provides multiple ways to format strings, such as using the ",Object(j.jsx)("code",{children:"%"})," operator for C-style string formatting, the",Object(j.jsx)("code",{children:" format()"})," function, and formatted string literals (strings that start with ",Object(j.jsx)("code",{children:"f"})," or ",Object(j.jsx)("code",{children:"F"}),")",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"var1, var2, var3, var4 =",Object(j.jsx)("span",{className:"number",children:" 10"}),",",Object(j.jsx)("span",{className:"string",children:" '$'"}),",",Object(j.jsx)("span",{className:"number",children:" 901.921049"}),",",Object(j.jsx)("span",{className:"string",children:" ' exit'"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"string",children:"'int: %d, float: %f, char: %c, and string: %s' "}),"% (var1, var3, var2, var4)",Object(j.jsx)("br",{}),"'int: 10, float: 901.921049, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"string",children:"'int: %d, float: %.2f, char: %c, and string: %s' "}),"% (var1, var3, var2, var4)",Object(j.jsx)("br",{}),"'int: 10, float: 901.92, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"string",children:"'int: {}, float: {}, char: {}, and string: {}'"}),".",Object(j.jsx)("span",{className:"function-call",children:"format"}),"(var1, var3, var2, var4)",Object(j.jsx)("br",{}),"'int: 10, float: 901.921049, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"string",children:"'int: {}, float: {:.2f}, char: {}, and string: {}'"}),".",Object(j.jsx)("span",{className:"function-call",children:"format"}),"(var1, var3, var2, var4)",Object(j.jsx)("br",{}),"'int: 10, float: 901.92, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"string",children:"'int: {0}, float: {2}, char: {1}, and string: {3}'"}),".",Object(j.jsx)("span",{className:"function-call",children:"format"}),"(var1, var2, var3, var4)",Object(j.jsx)("br",{}),"'int: 10, float: 901.921049, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"string",children:"'int: {a}, float: {b}, char: {c}, and string: {d}'"}),".",Object(j.jsx)("span",{className:"function-call",children:"format"}),"(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),"=var1, ",Object(j.jsx)("span",{className:"arg-param",children:"c"}),"=var3,",Object(j.jsx)("span",{className:"arg-param",children:" b"}),"=var2, ",Object(j.jsx)("span",{className:"arg-param",children:"d"}),"=var4)",Object(j.jsx)("br",{}),"'int: 10, float: 901.921049, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"format-keyword",children:"f"}),Object(j.jsx)("span",{className:"string",children:"'int: "}),"{ var1 }",Object(j.jsx)("span",{className:"string",children:", float: "}),"{ var3 }",Object(j.jsx)("span",{className:"string",children:", char: "}),"{ var2 }",Object(j.jsx)("span",{className:"string",children:", and string: "}),"{ var4 }",Object(j.jsx)("span",{className:"string",children:"'"}),Object(j.jsx)("br",{}),"'int: 10, float: 901.921049, char: $, and string:  exit'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"format-keyword",children:"F"}),Object(j.jsx)("span",{className:"string",children:"'int: "}),"{ var1 + ",Object(j.jsx)("span",{className:"number",children:"10"})," }",Object(j.jsx)("span",{className:"string",children:", float: "}),"{ var3:",Object(j.jsx)("span",{className:"format-keyword",children:".2f"})," }",Object(j.jsx)("span",{className:"string",children:", char: "}),"{ var2 }",Object(j.jsx)("span",{className:"string",children:", and string: "}),"{ var4.",Object(j.jsx)("span",{className:"function-call",children:"upper"}),"() }",Object(j.jsx)("span",{className:"string",children:"'"}),Object(j.jsx)("br",{}),"'int: 20, float: 901.92, char: $, and string:  EXIT'"]})]})},x=function(){return Object(j.jsxs)("div",{children:["List indexing works the same as string slicing.",Object(j.jsx)("div",{className:"content-subtopic",children:"Changing Items"}),Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l = [",Object(j.jsx)("span",{className:"number",children:"0"}),",",Object(j.jsx)("span",{className:"number",children:" 1"}),", ",Object(j.jsx)("span",{className:"number",children:" 2"}),",",Object(j.jsx)("span",{className:"number",children:" 3"}),",",Object(j.jsx)("span",{className:"number",children:" 4"}),",",Object(j.jsx)("span",{className:"number",children:" 5"}),",",Object(j.jsx)("span",{className:"number",children:" 6"}),",",Object(j.jsx)("span",{className:"number",children:" 7"}),",",Object(j.jsx)("span",{className:"number",children:" 8"}),",",Object(j.jsx)("span",{className:"number",children:" 9"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l[",Object(j.jsx)("span",{className:"number",children:"2"}),":",Object(j.jsx)("span",{className:"number",children:"5"}),"] = [",Object(j.jsx)("span",{className:"string",children:"'2'"}),",",Object(j.jsx)("span",{className:"string",children:" '3'"}),",",Object(j.jsx)("span",{className:"string",children:" '4'"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0, 1, '2', '3', '4', 5, 6, 7, 8, 9]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l[",Object(j.jsx)("span",{className:"number",children:"6"}),":",Object(j.jsx)("span",{className:"number",children:"8"}),"] = [",Object(j.jsx)("span",{className:"string",children:"'6'"}),",",Object(j.jsx)("span",{className:"string",children:" '7'"}),",",Object(j.jsx)("span",{className:"number",children:" 7.5"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0, 1, '2', '3', '4', 5, '6', '7', 7.5, 8, 9]"]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Adding Items"}),"The ",Object(j.jsx)("code",{children:"extend()"})," function allows us to add any iterable object to a list.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l = [",Object(j.jsx)("span",{className:"number",children:"0"}),",",Object(j.jsx)("span",{className:"number",children:" 1"}),", ",Object(j.jsx)("span",{className:"number",children:" 2"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l.",Object(j.jsx)("span",{className:"function-call",children:"extend"}),"([",Object(j.jsx)("span",{className:"number",children:"3"}),",",Object(j.jsx)("span",{className:"number",children:" 4"}),"])",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0, 1, 2, 3, 4]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l.",Object(j.jsx)("span",{className:"function-call",children:"extend"}),"((",Object(j.jsx)("span",{className:"number",children:"5"}),",",Object(j.jsx)("span",{className:"number",children:" 6"}),"))",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0, 1, 2, 3, 4, 5, 6]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l.",Object(j.jsx)("span",{className:"function-call",children:"extend"}),"({",Object(j.jsx)("span",{className:"number",children:"7"}),":",Object(j.jsx)("span",{className:"string",children:" 'a'"}),",",Object(j.jsx)("span",{className:"number",children:" 8"}),":",Object(j.jsx)("span",{className:"string",children:" 'b'"}),"})",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("span",{className:"comment",children:" # note how only keys are added to the list"}),Object(j.jsx)("br",{}),"[0, 1, 2, 3, 4, 5, 6, 7, 8]"]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Removing Items"}),Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l = [",Object(j.jsx)("span",{className:"number",children:"0"}),",",Object(j.jsx)("span",{className:"number",children:" 3"}),",",Object(j.jsx)("span",{className:"number",children:" 2"}),",",Object(j.jsx)("span",{className:"number",children:" 3"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l.",Object(j.jsx)("span",{className:"function-call",children:"remove"}),"(",Object(j.jsx)("span",{className:"number",children:"3"}),")",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0, 2, 3]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l.",Object(j.jsx)("span",{className:"function-call",children:"pop"}),"(",Object(j.jsx)("span",{className:"number",children:"1"}),")",Object(j.jsx)("br",{}),"2",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0, 3]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"keyword",children:"del "}),"l[",Object(j.jsx)("span",{className:"number",children:"1"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l",Object(j.jsx)("br",{}),"[0]",Object(j.jsx)("br",{})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Custom Sorting"}),Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," custom_sort(",Object(j.jsx)("span",{className:"arg-param",children:"item"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"return "}),"item % ",Object(j.jsx)("span",{className:"number",children:"5"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"l = [",Object(j.jsx)("span",{className:"number",children:"78"}),",",Object(j.jsx)("span",{className:"number",children:" 90"}),", ",Object(j.jsx)("span",{className:"number",children:" 1"}),",",Object(j.jsx)("span",{className:"number",children:" -9"}),",",Object(j.jsx)("span",{className:"number",children:" 57"}),",",Object(j.jsx)("span",{className:"number",children:" 22"}),"]",Object(j.jsx)("br",{}),"l.",Object(j.jsx)("span",{className:"function-call",children:"sort"}),"(",Object(j.jsx)("span",{className:"arg-param",children:"key"}),"=custom_sort)",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(l)",Object(j.jsx)("span",{className:"comment",children:" # prints: [90, 1, -9, 57, 22, 78]"})]})]})},O=function(){return Object(j.jsxs)("div",{children:["Tuples are ordered and immutable. Due to their immutability, accessing elements in tuples is a lot quicker than accessing element in a list. Tuples also require less space. Tuple indexing works the same as string slicing.",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"Tuples have only two methods: ",Object(j.jsx)("code",{children:"count()"})," and ",Object(j.jsx)("code",{children:"index()"}),". These work the same as their ",Object(j.jsx)("code",{children:"list"})," counterparts.",Object(j.jsx)("br",{}),Object(j.jsx)("div",{className:"content-subtopic",children:"Creating Tuples"}),Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"t = (",Object(j.jsx)("span",{className:"number",children:"1"}),", )",Object(j.jsx)("span",{className:"comment",children:" # the comma defines t as a tuple"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"t = (",Object(j.jsx)("span",{className:"number",children:"1"}),")",Object(j.jsx)("span",{className:"comment",children:" # here, t is of type int"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"typecast",children:"tuple"}),"(i ",Object(j.jsx)("span",{className:"keyword",children:"for "}),"i ",Object(j.jsx)("span",{className:"keyword",children:"in "}),Object(j.jsx)("span",{className:"function-call",children:"range"}),"(",Object(j.jsx)("span",{className:"number",children:"5"}),"))",Object(j.jsx)("span",{className:"comment",children:" # similar to list comprehension, tuple comprehension also exists."}),Object(j.jsx)("br",{}),"(0, 1, 2, 3, 4)",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"(i ",Object(j.jsx)("span",{className:"keyword",children:"for "}),"i ",Object(j.jsx)("span",{className:"keyword",children:"in "}),Object(j.jsx)("span",{className:"function-call",children:"range"}),"(",Object(j.jsx)("span",{className:"number",children:"5"}),"))",Object(j.jsx)("span",{className:"comment",children:" # note that if we do not typecast the comprehension, we do not get a tuple"}),Object(j.jsx)("br",{}),"<generator object <genexpr> at 0x0000019323DD9510>"]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Adding Elements"}),"While we cannot change a tuple, and hence cannot add elements to a pre-existing tuple, we can add two or more tuples to create a new tuple. We can also multiply (",Object(j.jsx)("code",{children:"*"}),") tuples to create new tuples.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"(",Object(j.jsx)("span",{className:"number",children:"1"}),",",Object(j.jsx)("span",{className:"number",children:" 2"}),") + (",Object(j.jsx)("span",{className:"number",children:"3"}),",",Object(j.jsx)("span",{className:"number",children:" 4"}),")",Object(j.jsx)("br",{}),"(1, 2, 3, 4)",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"(",Object(j.jsx)("span",{className:"number",children:"1"}),",",Object(j.jsx)("span",{className:"number",children:" 2"}),") * ",Object(j.jsx)("span",{className:"number",children:"5"}),Object(j.jsx)("br",{}),"(1, 2, 1, 2, 1, 2, 1, 2, 1, 2)"]})]})},m=function(){return Object(j.jsxs)("div",{children:["Dictionaries are ordered as of Python 3.7. In Python 3.6 and earlier, dictionaries are undordered.",Object(j.jsx)("br",{}),Object(j.jsx)("div",{className:"content-subtopic",children:"Dictionary Comprehension"}),"Dictionaries can also be created using dictionary comprehension, similar to list comprehension.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"{ k: v ",Object(j.jsx)("span",{className:"keyword",children:"for "}),"(k, v)",Object(j.jsx)("span",{className:"keyword",children:" in "}),Object(j.jsx)("span",{className:"function-call",children:"zip"}),"((",Object(j.jsx)("span",{className:"string",children:"'a'"}),",",Object(j.jsx)("span",{className:"string",children:" 'b'"}),"), (",Object(j.jsx)("span",{className:"number",children:"1"}),",",Object(j.jsx)("span",{className:"number",children:" 2"}),")) }",Object(j.jsx)("br",{}),"{'a': 1, 'b': 2}",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"l = [",Object(j.jsx)("span",{className:"string",children:"'a'"}),",",Object(j.jsx)("span",{className:"string",children:" 'b'"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"{ i: l[i] ",Object(j.jsx)("span",{className:"keyword",children:"for "}),"i",Object(j.jsx)("span",{className:"keyword",children:" in "}),Object(j.jsx)("span",{className:"function-call",children:"range"}),"(",Object(j.jsx)("span",{className:"function-call",children:"len"}),"(l)) }",Object(j.jsx)("br",{}),"{0: 'a', 1: 'b'}",Object(j.jsx)("br",{})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Accessing Values"}),Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d = {",Object(j.jsx)("span",{className:"number",children:"0"}),":",Object(j.jsx)("span",{className:"string",children:" 'a'"}),",",Object(j.jsx)("span",{className:"number",children:" 1"}),":",Object(j.jsx)("span",{className:"string",children:" 'b'"}),"}",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d.",Object(j.jsx)("span",{className:"function-call",children:"keys"}),"()",Object(j.jsx)("span",{className:"comment",children:" # this does not return a list, if you want a list you can typecast as such"}),Object(j.jsx)("br",{}),"dict_keys([0, 1])",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"typecast",children:"list"}),"(d.",Object(j.jsx)("span",{className:"function-call",children:"keys"}),"())",Object(j.jsx)("br",{}),"[0, 1]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"typecast",children:"tuple"}),"(d.",Object(j.jsx)("span",{className:"function-call",children:"keys"}),"())",Object(j.jsx)("br",{}),"(0, 1)",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d.",Object(j.jsx)("span",{className:"function-call",children:"values"}),"()",Object(j.jsx)("span",{className:"comment",children:" # similarly, you can typecast the result to list or tuple"}),Object(j.jsx)("br",{}),"dict_values(['a', 'b'])",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"x = d.",Object(j.jsx)("span",{className:"function-call",children:"items"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"x",Object(j.jsx)("br",{}),"dict_items([(0, 'a'), (1, 'b')])",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d[",Object(j.jsx)("span",{className:"number",children:"2"}),"] = ",Object(j.jsx)("span",{className:"string",children:"'c'"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"x",Object(j.jsx)("span",{className:"comment",children:" # note how x updates automatically"}),Object(j.jsx)("br",{}),"dict_items([(0, 'a'), (1, 'b'), (2, 'c')])",Object(j.jsx)("br",{})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Deleting Values"}),Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d = {",Object(j.jsx)("span",{className:"number",children:"0"}),":",Object(j.jsx)("span",{className:"string",children:" 'a'"}),",",Object(j.jsx)("span",{className:"number",children:" 1"}),":",Object(j.jsx)("span",{className:"string",children:" 'b'"}),"}",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d.",Object(j.jsx)("span",{className:"function-call",children:"pop"}),"(",Object(j.jsx)("span",{className:"number",children:"1"}),")",Object(j.jsx)("br",{}),"'b'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d",Object(j.jsx)("br",{}),"{0: 'a'}",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d.",Object(j.jsx)("span",{className:"function-call",children:"pop"}),"(",Object(j.jsx)("span",{className:"number",children:"1"}),", ",Object(j.jsx)("span",{className:"string",children:"'no'"}),")",Object(j.jsx)("br",{}),"'no'",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d[",Object(j.jsx)("span",{className:"number",children:"2"}),"] = ",Object(j.jsx)("span",{className:"string",children:"'c'"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d.",Object(j.jsx)("span",{className:"function-call",children:"popitem"}),"()",Object(j.jsx)("span",{className:"comment",children:" # removes and returns the last item that was added"}),Object(j.jsx)("br",{}),"(2, 'c')",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d[",Object(j.jsx)("span",{className:"number",children:"3"}),"] = ",Object(j.jsx)("span",{className:"string",children:"'d'"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),Object(j.jsx)("span",{className:"keyword",children:"del "}),"d[",Object(j.jsx)("span",{className:"number",children:"3"}),"]",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"arrow",children:">>> "}),"d.",Object(j.jsx)("span",{className:"function-call",children:"clear"}),"()"]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Misc. Methods"}),Object(j.jsxs)("div",{className:"code-container",children:["d = ",Object(j.jsx)("span",{className:"literal",children:"None"}),Object(j.jsx)("br",{}),"keys = (",Object(j.jsx)("span",{className:"number",children:"1"}),", ",Object(j.jsx)("span",{className:"number",children:"2"}),", ",Object(j.jsx)("span",{className:"number",children:"3"}),")",Object(j.jsx)("br",{}),"values = (",Object(j.jsx)("span",{className:"string",children:"'a'"}),", ",Object(j.jsx)("span",{className:"string",children:"'b'"}),")",Object(j.jsx)("br",{}),"d = ",Object(j.jsx)("span",{className:"typecast",children:"dict"}),".",Object(j.jsx)("span",{className:"function-call",children:"fromkeys"}),"(keys, values)",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(d)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(d.",Object(j.jsx)("span",{className:"function-call",children:"setdefault"}),"(",Object(j.jsx)("span",{className:"number",children:"1"}),", ",Object(j.jsx)("span",{className:"string",children:"'a'"}),"))",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(d.",Object(j.jsx)("span",{className:"function-call",children:"setdefault"}),"(",Object(j.jsx)("span",{className:"number",children:"4"}),", ",Object(j.jsx)("span",{className:"string",children:"'b'"}),"))",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(d)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["{1: ('a', 'b'), 2: ('a', 'b'), 3: ('a', 'b')}",Object(j.jsx)("br",{}),"('a', 'b')",Object(j.jsx)("br",{}),"b",Object(j.jsx)("br",{}),"{1: ('a', 'b'), 2: ('a', 'b'), 3: ('a', 'b'), 4: 'b'}",Object(j.jsx)("br",{})]}),Object(j.jsx)("span",{className:"string",children:'"""'})]})]})},h=function(){return Object(j.jsxs)("div",{children:[Object(j.jsx)("div",{className:"content-subtopic",children:"Parameters & Arguments"}),"Positional parameters must be placed before keyword parameters. Similarly, when passing arguments, positional arguments must be passed before keyword arguments.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"comment",children:"# this will give us a SyntaxError"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),"=",Object(j.jsx)("span",{className:"number",children:"10"}),",",Object(j.jsx)("span",{className:"arg-param",children:" b"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"pass"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo1(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),",",Object(j.jsx)("span",{className:"arg-param",children:" b"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"pass"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo1"}),"(",Object(j.jsx)("span",{className:"arg-param",children:"b"}),"=",Object(j.jsx)("span",{className:"number",children:"1"}),",",Object(j.jsx)("span",{className:"number",children:" 10"}),")",Object(j.jsx)("span",{className:"comment",children:" # assuming foo() does not exist, this will give us a SyntaxError"})]}),"Python also supports variable number arguments, both of type positional and keyword.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo(",Object(j.jsx)("span",{className:"arg-param",children:"*args"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(args)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo1(",Object(j.jsx)("span",{className:"arg-param",children:"**kwargs"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(kwargs)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo"}),"(",Object(j.jsx)("span",{className:"number",children:"12"}),", ",Object(j.jsx)("span",{className:"string",children:"'a'"}),", ",Object(j.jsx)("span",{className:"number",children:"90.123"}),")",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo1"}),"(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),"=",Object(j.jsx)("span",{className:"number",children:"12"}),",",Object(j.jsx)("span",{className:"arg-param",children:" b"}),"=",Object(j.jsx)("span",{className:"string",children:"'a'"}),",",Object(j.jsx)("span",{className:"arg-param",children:" c"}),"=",Object(j.jsx)("span",{className:"number",children:"90.123"}),")",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"(12, 'a', 90.123)",Object(j.jsx)("br",{}),"{'a': 12, 'b': 'a', 'c': 90.123}"]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),"Instead of passing individual values to functions, we can also unpack iterable objects to pass parameters.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),",",Object(j.jsx)("span",{className:"arg-param",children:" b"}),",",Object(j.jsx)("span",{className:"arg-param",children:" c"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(a, b, c)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo"}),"(*[",Object(j.jsx)("span",{className:"number",children:"12"}),",",Object(j.jsx)("span",{className:"number",children:" 3"}),",",Object(j.jsx)("span",{className:"number",children:" 9"}),"])",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo"}),"(*(",Object(j.jsx)("span",{className:"number",children:"12"}),",",Object(j.jsx)("span",{className:"string",children:" 'a'"}),",",Object(j.jsx)("span",{className:"number",children:" 2"}),"))",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"foo"}),"(**{",Object(j.jsx)("span",{className:"string",children:"'a'"}),": ",Object(j.jsx)("span",{className:"number",children:"1"}),",",Object(j.jsx)("span",{className:"string",children:" 'c'"}),": ",Object(j.jsx)("span",{className:"number",children:"2"}),",",Object(j.jsx)("span",{className:"string",children:" 'b'"}),": ",Object(j.jsx)("span",{className:"number",children:"3"}),"})",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"12 3 9",Object(j.jsx)("br",{}),"12 a 2",Object(j.jsx)("br",{}),"1 3 2"]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),Object(j.jsx)("div",{className:"content-subtopic",children:"Type Hinting"}),"Python is a dynamically typed language, meaning that variables are not restricted to any one specific data type. This means that users are free to pass whatever data they wish to functions, even if the function was not created to handle that data type. To indicate what data was expected to be passed, functions would require proper documentation to show what was expected. However, with the introduction of ",Object(j.jsx)("a",{href:"https://www.python.org/dev/peps/pep-0484/",children:"PEP 484"}),", we can easily use type hinting \u2014 a more succinct way of indicating the datatypes of functions parameters.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword",children:"from"})," typing ",Object(j.jsx)("span",{className:"keyword",children:"import"})," TypeVar",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"T = ",Object(j.jsx)("span",{className:"function-call",children:"TypeVar"}),"(",Object(j.jsx)("span",{className:"string",children:"'T'"}),",",Object(j.jsx)("span",{className:"typecast",children:" int"}),", ",Object(j.jsx)("span",{className:"typecast",children:" float"}),")",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," add(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),": T,",Object(j.jsx)("span",{className:"arg-param",children:" b"}),": T):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(a + b)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," print_list(",Object(j.jsx)("span",{className:"arg-param",children:"l"}),": ",Object(j.jsx)("span",{className:"typecast",children:"list"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"for"})," i ",Object(j.jsx)("span",{className:"keyword",children:"in"})," l:",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(i, ",Object(j.jsx)("span",{className:"arg-param",children:"end"}),"=",Object(j.jsx)("span",{className:"string",children:"' '"}),")",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"def"})," foo(",Object(j.jsx)("span",{className:"arg-param",children:"a"}),":",Object(j.jsx)("span",{className:"typecast",children:" int"}),") -> ",Object(j.jsx)("span",{className:"typecast",children:"str"}),":",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword",children:"return"}),Object(j.jsx)("span",{className:"function-call",children:" chr"}),"(a)"]}),"The above code snippet shows different ways in which we can utilise type hinting. The functions ",Object(j.jsx)("code",{children:"print_list()"})," and",Object(j.jsx)("code",{children:" foo()"})," show how to do type hinting without using any modules. We define the parameters ",Object(j.jsx)("code",{children:"l"})," and ",Object(j.jsx)("code",{children:"a"})," as datatype of ",Object(j.jsx)("code",{children:" list"})," and ",Object(j.jsx)("code",{children:"int"}),", respectively. Furthermore, the function ",Object(j.jsx)("code",{children:"foo()"})," defines the datatype of the return value as ",Object(j.jsx)("code",{children:"str"}),".",Object(j.jsx)("br",{}),"Function ",Object(j.jsx)("code",{children:"add"})," shows how we can utilise the typing module to define more complex type hintings. ",Object(j.jsx)("code",{children:"T"})," defines a type hinting that would indicate that the parameter should only be of type ",Object(j.jsx)("code",{children:"int"})," or ",Object(j.jsx)("code",{children:"float"}),".",Object(j.jsx)("br",{}),"While type hinting does not force users to pass arguments of the defined type, it makes it easier for people reading or using these functions to understand what exactly the functions requires from the user and what it returns. To better utilise the functionalities of type hinting, it is recommended to use static typing linters such as ",Object(j.jsx)("a",{href:"https://github.com/python/mypy",children:"mypy"}),"."]})},p=function(){return Object(j.jsxs)("div",{children:[Object(j.jsx)("div",{className:"content-subtopic",children:"Multiple Inheritance"}),"Not only does Python support multi-level Inheritance, it also supports multiple inheritance. The problem with multiple inheritance however is method overriding. If two inherited classes contain a common method ",Object(j.jsx)("code",{children:"foo()"}),", which one will be inherited?",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword-italics",children:"class"}),Object(j.jsx)("span",{className:"typecast",children:" Base1"}),":",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"class-key",children:"self"}),".__val = ",Object(j.jsx)("span",{className:"number",children:"10"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" override"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"In Base1"'}),",",Object(j.jsx)("span",{className:"class-key",children:" self"}),".__val)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"class"}),Object(j.jsx)("span",{className:"typecast",children:" Base2"}),":",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"class-key",children:"self"}),".__val = ",Object(j.jsx)("span",{className:"number",children:"-10"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" override"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"In Base2"'}),",",Object(j.jsx)("span",{className:"class-key",children:" self"}),".__val)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"class"}),Object(j.jsx)("span",{className:"typecast",children:" Child1"}),"(",Object(j.jsx)("span",{className:"class-key",children:"Base1"}),",",Object(j.jsx)("span",{className:"class-key",children:" Base2"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003Base1.",Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003Base2.",Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"class-key",children:"self"}),".val = ",Object(j.jsx)("span",{className:"number",children:"1"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"class"}),Object(j.jsx)("span",{className:"typecast",children:" Child2"}),"(",Object(j.jsx)("span",{className:"class-key",children:"Base2"}),",",Object(j.jsx)("span",{className:"class-key",children:" Base1"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003Base1.",Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003Base2.",Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"class-key",children:"self"}),".val = ",Object(j.jsx)("span",{className:"number",children:"2"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"child1, child2 = ",Object(j.jsx)("span",{className:"function-call",children:"Child1"}),"(), ",Object(j.jsx)("span",{className:"function-call",children:"Child2"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"Child1:"'}),")",Object(j.jsx)("br",{}),"child1.",Object(j.jsx)("span",{className:"function-call",children:"override"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(child1.val, child1._Base1__val, child1._Base2__val)",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"Child2:"'}),")",Object(j.jsx)("br",{}),"child2.",Object(j.jsx)("span",{className:"function-call",children:"override"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(child2.val, child2._Base1__val, child2._Base2__val)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"Child1:",Object(j.jsx)("br",{}),"In Base1: 10",Object(j.jsx)("br",{}),"1 10 -10",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"Child2:",Object(j.jsx)("br",{}),"In Base2: -10",Object(j.jsx)("br",{}),"2 10 -10"]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),"The above code shows how methods are resolved during multiple inheritance. The two base classes have a common method:",Object(j.jsx)("code",{children:" override()"}),", so when that method is called by the child classes Python chooses the method of the class that was inherited first.",Object(j.jsx)("br",{}),'On top of that, the above code shows how name mangling works in Python. Name mangling is a way to avoid easily overriding parent class attributes/methods. By adding "__" in front of an attribute or method, it allows child classes to have attributes and methods of the same name without overriding it.',Object(j.jsx)("div",{className:"content-subtopic",children:"Abstract Classes"}),"Any method defined in an abstract class must be overriden by the inheriting class.",Object(j.jsxs)("div",{className:"code-container",children:[Object(j.jsx)("span",{className:"keyword",children:"from"})," abc ",Object(j.jsx)("span",{className:"keyword",children:"import"})," ABCMeta, abstractmethod",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"class"}),Object(j.jsx)("span",{className:"typecast",children:" Abstract"}),"(",Object(j.jsx)("span",{className:"typecast",children:"metaclass"}),"=",Object(j.jsx)("span",{className:"class-key",children:"ABCMeta"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"decorators",children:"@abstractmethod"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" foo"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"keyword",children:"pass"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"decorators",children:"@property"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"decorators",children:"@abstractmethod"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" val"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"keyword",children:"pass"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"keyword-italics",children:"class"}),Object(j.jsx)("span",{className:"typecast",children:" Base"}),"(",Object(j.jsx)("span",{className:"class-key",children:"Abstract"}),"):",Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" __init__"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"class-key",children:"self"}),"._val = ",Object(j.jsx)("span",{className:"number",children:"10"}),Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" foo"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"function-call",children:"print"}),"(",Object(j.jsx)("span",{className:"string",children:'"Abstract method overriden"'}),")",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"decorators",children:"@property"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" val"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"keyword",children:"return "}),Object(j.jsx)("span",{className:"class-key",children:"self"}),"._val",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"decorators",children:"@val.setter"}),Object(j.jsx)("br",{}),"\u2003",Object(j.jsx)("span",{className:"keyword-italics",children:"def"}),Object(j.jsx)("span",{className:"function-call",children:" val"}),"(",Object(j.jsx)("span",{className:"class-key",children:"self"}),", ",Object(j.jsx)("span",{className:"arg-param",children:"value"}),"):",Object(j.jsx)("br",{}),"\u2003\u2003",Object(j.jsx)("span",{className:"class-key",children:"self"}),"._val = value",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),"b = ",Object(j.jsx)("span",{className:"function-call",children:"Base"}),"()",Object(j.jsx)("br",{}),"b.",Object(j.jsx)("span",{className:"function-call",children:"foo"}),"()",Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(b.val)",Object(j.jsx)("br",{}),"b.val = ",Object(j.jsx)("span",{className:"number",children:"99"}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"function-call",children:"print"}),"(b.val)",Object(j.jsx)("br",{}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'}),Object(j.jsx)("br",{}),Object(j.jsxs)("span",{className:"comment",children:["Output:",Object(j.jsx)("br",{}),"Asbtract method overriden",Object(j.jsx)("br",{}),"10",Object(j.jsx)("br",{}),"99"]}),Object(j.jsx)("br",{}),Object(j.jsx)("span",{className:"string",children:'"""'})]}),"This code also shows the use of ",Object(j.jsx)("code",{children:"@property"})," and ",Object(j.jsx)("code",{children:"@attribute.setter"})," annotations to create getter and setter methods for class attributes."]})},N=function(e){return Object(j.jsxs)("div",{children:[Object(j.jsx)("p",{id:"top",children:Object(j.jsx)("span",{className:"link",onClick:function(){e.hidePage()},children:"< Go Back"})}),Object(j.jsx)("h1",{className:"display-2 fw-bold text-decoration-underline",children:e.children})]})},u=function(e){var s=Object(n.useState)(!1),c=Object(a.a)(s,2),t=c[0],r=c[1],l=Object(n.useState)(!1),i=Object(a.a)(l,2),b=i[0],u=i[1],f=Object(n.useRef)(0);Object(n.useEffect)((function(){var e=setTimeout((function(){r(!0)}),100);return function(){e&&clearTimeout(e)}}),[]);return Object(j.jsx)("div",{id:"page-container",className:t?"page-container":"page-container-hide",onScroll:function(e){var s=e.target,c=document.body,a=(s.scrollTop||c.scrollTop)/((s.scrollHeight||c.scrollHeight)-s.clientHeight)*100;f.current-a>0?(f.current=a,u(!0)):(f.current=a,u(!1))},children:Object(j.jsxs)("div",{className:"page-content-container",children:[Object(j.jsx)(N,{hidePage:function(){r(!1);var s=setTimeout((function(){return e.hidePage({showPage:!1,subject:null}),function(){s&&clearTimeout(s)}}),500)},children:e.subject}),function(e){switch(e){case"Basics":return Object(j.jsx)(d,{});case"Strings":return Object(j.jsx)(o,{});case"Lists":return Object(j.jsx)(x,{});case"Tuples":return Object(j.jsx)(O,{});case"Dictionaries":return Object(j.jsx)(m,{});case"Functions":return Object(j.jsx)(h,{});case"Classes":return Object(j.jsx)(p,{});default:return""}}(e.subject),Object(j.jsx)("a",{href:"#top",className:b?"floating-button-container":"floating-button-container-hide",children:Object(j.jsx)("button",{className:"floating-button",children:Object(j.jsx)("span",{className:"material-icons",children:"arrow_upward"})})})]})})},f=(c(13),function(){var e=Object(n.useState)(!0),s=Object(a.a)(e,2),c=s[0],t=s[1],r=Object(n.useState)({showPage:!1,subject:null}),i=Object(a.a)(r,2),d=i[0],o=i[1],x=function(e){o(e)};return Object(j.jsxs)("div",{children:[d.showPage&&Object(j.jsx)(u,{subject:d.subject,hidePage:x}),c&&Object(j.jsx)(l,{mainActive:function(e){document.body.style.backgroundColor="rgb(0, 0, 51)",t(e)}}),!c&&Object(j.jsx)(b,{showPage:x})]})});r.a.render(Object(j.jsx)(f,{}),document.getElementById("root"))}],[[14,1,2]]]);
//# sourceMappingURL=main.0cf85cba.chunk.js.map