{"version":3,"sources":["MainTopic/MainTopic.js","SubtopicsContainer/Subtopic.js","SubtopicsContainer/SubtopicsContainer.js","PageContainer/ContentPages/BasicsPage.js","PageContainer/ContentPages/StringsPage.js","PageContainer/ContentPages/ListsPage.js","PageContainer/ContentPages/TuplesPage.js","PageContainer/ContentPages/DictionariesPage.js","PageContainer/ContentPages/FunctionsPage.js","PageContainer/ContentPages/ClassesPage.js","PageContainer/PageContentHeader.js","PageContainer/PageContainer.js","index.js"],"names":["MainTopic","props","useState","isHover","setIsHover","isClicked","setIsClicked","className","id","onMouseOver","onMouseOut","onClick","setTimeout","mainActive","Subtopic","type","toLowerCase","showPage","subject","getTextContentHoverClass","SubtopicsContainer","containerInit","setContainerInit","useEffect","timeoutID","clearTimeout","BasicsPage","StringsPage","ListsPage","TuplesPage","DictionariesPage","FunctionsPage","href","ClassesPage","PageContentHeader","hidePage","children","PageContainer","pageInit","setPageInit","showFloatingButton","setShowFloatingButton","scrollRef","useRef","onScroll","target","b","document","body","currScroll","scrollTop","scrollHeight","clientHeight","current","page","renderPage","Root","setMainActive","setPage","handlePage","val","style","backgroundColor","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0cf85cba.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport './MainTopic.css';\r\n\r\nconst MainTopic = (props) => {\r\n    const [ isHover, setIsHover ] = useState(false);\r\n    const [ isClicked, setIsClicked ] = useState(false);\r\n\r\n    const handleMouseOver = () => {\r\n        setIsHover(true);\r\n    };\r\n\r\n    const handleMouseOut = () => {\r\n        setIsHover(false);\r\n    };\r\n\r\n    const handleOnClick = () => {\r\n        setIsClicked(true);\r\n        setTimeout(() => {\r\n            props.mainActive(false);\r\n        }, 1200);\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\" id=\"root-main\">\r\n            <div className=\"col-xl-4 col-lg-4\"></div>\r\n            <div id=\"root\" className=\"col-xl-4 col-lg-4 col-sm-12 col-md-12 col-12\">\r\n                <div \r\n                    id=\"main-circle\" \r\n                    className={ isClicked ? \"main-circle animate-main-circle\" : \"main-circle main-circle-hover\" }\r\n                    onMouseOver={ handleMouseOver }\r\n                    onMouseOut={ handleMouseOut }\r\n                    onClick={ handleOnClick }>\r\n                    <div \r\n                        id=\"main-text-content\"\r\n                        className={ isClicked ? \"text-content text-content-hide\" : \"text-content\"}>\r\n                        <h1><b>Python Cheatsheet</b></h1>\r\n                        <h4>By Ishaan Bose</h4>\r\n                        <h4>Registration No.: 2147116</h4>\r\n                        <br/><br/>\r\n                        <span \r\n                            id=\"click-text\" \r\n                            className={ isHover ? \"click-text-disp\" : \"click-text\" }>\r\n                                Click to see cheat sheet!\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-xl-4 col-lg-4\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainTopic;","import React, { useState } from \"react\";\r\nimport './Subtopic.css';\r\n\r\nconst Subtopic = (props) => {\r\n    const [ isHover, setIsHover ] = useState(false);\r\n\r\n    const handleMouseOver = () => {\r\n        setIsHover(true);\r\n    };\r\n\r\n    const handleMouseOut = () => {\r\n        setIsHover(false);\r\n    };\r\n\r\n    const handleClick = () => {\r\n        props.showPage({\r\n            showPage: true,\r\n            subject: props.type\r\n        });\r\n    };\r\n\r\n    const getTextContentHoverClass = () => {\r\n        switch (props.type)\r\n        {\r\n            case \"Functions\" : return \"text-content-hover-funcs\";\r\n            case \"Dictionaries\" : return \"text-content-hover-dicts\";\r\n            default: return \"text-content-hover-gen\";\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-lg-4\">\r\n            <div \r\n                className={ `topic-${ props.type.toLowerCase() }` }\r\n                onMouseOver={ handleMouseOver }\r\n                onMouseOut={ handleMouseOut }\r\n                onClick={ handleClick } >\r\n                <div className={ isHover ? getTextContentHoverClass() : \"text-content\" }>\r\n                        { props.type }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Subtopic;","import React, { useState, useEffect } from \"react\";\r\nimport Subtopic from \"./Subtopic\";\r\nimport './Subtopic.css';\r\n\r\nconst SubtopicsContainer = (props) => {\r\n    const [ containerInit, setContainerInit ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeoutID = setTimeout(() => {\r\n            setContainerInit(true);\r\n        }, 100);\r\n\r\n        return () => {\r\n            if (timeoutID)\r\n                clearTimeout(timeoutID);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={containerInit ? \"sub-topics-container-disp\" : \"sub-topics-container\"}>\r\n            <div className=\"row\">\r\n                <Subtopic type=\"Lists\" showPage={ props.showPage } />\r\n                <Subtopic type=\"Strings\" showPage={ props.showPage } />\r\n                <Subtopic type=\"Tuples\" showPage={ props.showPage } />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-4\"></div>\r\n                <Subtopic type=\"Basics\" showPage={ props.showPage } />\r\n                <div className=\"col-lg-4\"></div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <Subtopic type=\"Classes\" showPage={ props.showPage } />\r\n                <Subtopic type=\"Functions\" showPage={ props.showPage } />\r\n                <Subtopic type=\"Dictionaries\" showPage={ props.showPage } />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubtopicsContainer;","import React from \"react\";\r\nimport '../Page.css';\r\n\r\nconst BasicsPage = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"content-subtopic\">About Python</div>\r\n            <ul>\r\n                <li>Desgined by Guido van Rossum</li>\r\n                <li>Python is an interpreted, interactive, object-oriented programming language</li>\r\n                <li>Python can be treated in a procedural way, an object-oriented way or a functional way</li>\r\n            </ul>\r\n            <div className=\"content-subtopic\">Comments</div>\r\n            <div className=\"code-container\">\r\n                <div className=\"string\">\r\n                    <span className=\"comment\"># This is a single-line comment</span><br/><br/>\r\n                    '''<br/>\r\n                    <span className=\"comment\">This is a multi-line comment</span><br/>\r\n                    '''<br/><br/>\r\n                    \"\"\"<br/>\r\n                    <span className=\"comment\">This is also an example of multi-line comment</span><br/>\r\n                    \"\"\"\r\n                </div>\r\n            </div>\r\n            <div className=\"content-subtopic\">Variables</div>\r\n            Unlike most languages, Python does not explicitly define a variable's data type.\r\n            <div className=\"code-container\">\r\n                <span className=\"comment\"># These are all valid variables</span><br/>\r\n                x = <span className=\"number\">10</span> <span className=\"comment\"># this is a variable of type int</span><br/>\r\n                y = <span className=\"string\">\"Hello world\"</span> <span className=\"comment\"># this is a variable of type string</span>\r\n            </div>\r\n            Python supports multiple variable assignment\r\n            <div className=\"code-container\">\r\n                var1, var2, var3 = <span className=\"number\">10</span>, <span className=\"string\">'var2'</span>, <span className=\"number\">1.28</span>\r\n                <span className=\"comment\"> # equivalent to: var1 = 10 var2 = 'var2' var3 = 1.28</span><br/>\r\n                item1, item2 = [<span className=\"string\">'A'</span>, <span className=\"string\">'B'</span>]\r\n                <span className=\"comment\"> # equivalent to: item1 = 'A' item2 = 'B'</span><br/>\r\n                a = b = c = <span className=\"number\">100</span>\r\n                <span className=\"comment\"> # assigns 100 to all the variables</span>\r\n            </div>\r\n            Python also allows for more advanced unpacking of lists and tuples.\r\n            <div className=\"code-container\">\r\n                a, *b = [<span className=\"number\">1</span>, <span className=\"number\">2</span>, <span className=\"number\">3</span>, <span className=\"number\">4</span>]\r\n                <span className=\"comment\"> # this gives us a = 1 and b = [2, 3, 4]</span><br/>\r\n                a, *b = (<span className=\"number\">1</span>, <span className=\"number\">2</span>, <span className=\"number\">3</span>, <span className=\"number\">4</span>)\r\n                <span className=\"comment\"> # same as above</span><br/>\r\n                a, *b, c = (<span className=\"number\">1</span>, <span className=\"number\">2</span>, <span className=\"number\">3</span>, <span className=\"number\">4</span>)\r\n                <span className=\"comment\"> # this gives us a = 1, b = [2, 3] and c = 4</span>\r\n            </div>\r\n            You can also unpack dictionaries, however this will only allow us to access its keys but not its values.\r\n            <div className=\"code-container\">\r\n                a, b = &#123; <span className=\"string\">'key1'</span>: <span className=\"number\">10</span>, <span className=\"string\">'key2'</span>: <span className=\"number\">20.12</span> &#125;\r\n                <span className=\"comment\"> # this gives us a = 'key1' and b = 'key2', we cannot unpack the values</span>\r\n            </div>\r\n            <div className=\"content-subtopic\">Variable Scope</div>\r\n            The scope of a variable in Python extends from the first assignment of the variable until the end of its block.\r\n            A block in Python is defined by functions and classes rather than indentation. So a variable assigned in the an if statement or loop statements,\r\n            can still be accessed after the end of the statements. For example:\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword\">if</span> <span className=\"literal\">True</span>:<br/>\r\n                &emsp;i = <span className=\"number\">10</span><br/>\r\n                <span className=\"function-call\">print</span>(i)\r\n                <span className=\"comment\"> # this will print 10, despite i never being assigned a value before the if the statement</span><br/><br/>\r\n                <span className=\"keyword\">for</span> j <span className=\"keyword\">in</span> <span className=\"function-call\">range</span>(<span className=\"number\">3</span>):<br/>\r\n                &emsp;<span className=\"keyword\">continue</span><br/>\r\n                <span className=\"function-call\">print</span>(j) <span className=\"comment\"># this will print 2</span>\r\n            </div>\r\n            A variable defined inside a function cannot be accessed outside of it.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">def</span> foo():<br/>\r\n                &emsp;local = <span className=\"number\">10</span><br/>\r\n                <span className=\"function-call\">print</span>(local)\r\n                <span className=\"comment\"> # this gives us a NameError as local is not defined outside of function foo()</span>\r\n            </div>\r\n            A variable defined outside of a function can be accessed inside it. However, assigning a value to the variable will convert it to a local variable, \r\n            meaning the value will only be changed for that variable inside of the function and not outside of it. This also means that if you accessed the local \r\n            variable's value before the assignment, Python will throw an UnboundLocalError.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">def</span> foo1():<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(i)<br/><br/>\r\n                <span className=\"keyword-italics\">def</span> foo2():<br/>\r\n                &emsp;i = <span className=\"number\">0</span><br/>\r\n                &emsp;<span className=\"function-call\">print</span>(i)<br/><br/>\r\n                <span className=\"keyword-italics\">def</span> foo3():<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(i)<br/>\r\n                &emsp;i = <span className=\"number\">1</span><br/>\r\n                &emsp;<span className=\"function-call\">print</span>(i)<br/><br/>\r\n                i = <span className=\"number\">10</span><br/>\r\n                <span className=\"function-call\">foo1</span>()\r\n                <span className=\"comment\"> # this will print 10 (value of global variable i)</span><br/>\r\n                <span className=\"function-call\">foo2</span>()\r\n                <span className=\"comment\"> # this will print 0 (value of local variable i)</span><br/>\r\n                <span className=\"function-call\">print</span>(i)\r\n                <span className=\"comment\"> # this will print 10, showing that foo2 did not change the value of the global variable</span><br/>\r\n                <span className=\"function-call\">foo3</span>()\r\n                <span className=\"comment\"> # this will give us an UnboundLocalError</span><br/>\r\n            </div>\r\n            You can access variables that are not in the scope of a function using <code>global</code> or <code>nonlocal</code> keywords.\r\n            <code> global</code> allows us to access variables defined in the global scope (outside any functions or classes), whereas <code>nonlocal </code>\r\n            allows us to access variables defined in the outer scope with relation to the current scope.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">def</span> outer():<br/>\r\n                &emsp;<span className=\"keyword\">global </span>global_var<br/><br/>\r\n                &emsp;<span className=\"function-call\">print</span>(<span className=\"string\">'global_var before change inside outer():'</span>, global_var)<br/>\r\n                &emsp;global_var = <span className=\"number\">1</span><br/>\r\n                &emsp;outer_var = <span className=\"number\">2</span><br/>\r\n                &emsp;outer_var2 = <span className=\"string\">'a'</span><br/><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span> inner():<br/>\r\n                &emsp;&emsp;<span className=\"keyword\">global </span>global_var<br/>\r\n                &emsp;&emsp;<span className=\"keyword\">nonlocal </span>outer_var<br/><br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"global_var inside inner():\"</span>, global_var)<br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"outer_var before change inside inner():\"</span>, outer_var)<br/>\r\n                &emsp;&emsp;outer_var = <span className=\"number\">9</span><br/>\r\n                &emsp;&emsp;outer_var2 = <span className=\"string\">'b'</span><br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"outer_var2 in inner()\"</span>, outer_var2)<br/><br/>\r\n                &emsp;<span className=\"function-call\">inner</span>()<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"outer_var after change:\"</span>, outer_var)<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"outer_var2 after inner():\"</span>, outer_var2)<br/><br/>\r\n                global_var = <span className=\"number\">10</span><br/>\r\n                <span className=\"function-call\">outer</span>()<br/>\r\n                <span className=\"function-call\">print</span>(<span className=\"string\">'global_var after outer():'</span>, global_var)<br/><br/>\r\n                <span className=\"string\">'''</span><br/>\r\n                <span className=\"comment\">\r\n                    This gives us the following output:<br/>\r\n                    global_var before change inside outer(): 10<br/>\r\n                    global_var inside inner(): 1<br/>\r\n                    outer_var before change inside inner(): 2<br/>\r\n                    outer_var2 in inner() b<br/>\r\n                    outer_var after change: 9<br/>\r\n                    outer_var2 after inner(): a<br/>\r\n                    global_var after outer(): 1\r\n                </span><br/>\r\n                <span className=\"string\">'''</span><br/>\r\n            </div>\r\n            <div className=\"content-subtopic\">Ternary Operator</div>\r\n            Python supports ternary operators with this format: <code>&lt;expression&gt; if &lt;condition&gt; else &lt;expression&gt;</code>.\r\n            For example:\r\n            <div className=\"code-container\">\r\n                a, b = <span className=\"number\">10</span>, <span className=\"number\">9</span><br/>\r\n                max_val = a<span className=\"keyword\"> if </span>a &gt; b<span className=\"keyword\"> else </span> b\r\n                <span className=\"comment\"> # assigns value of a to max_val</span><br/><br/>\r\n                <span className=\"comment\"># You can also call functions from ternanry operators</span><br/>\r\n                <span className=\"function-call\">foo</span>()<span className=\"keyword\"> if </span>a &gt; b<span className=\"keyword\"> else </span> <span className=\"function-call\">foo1</span>()\r\n                <span className=\"comment\"> # This calls foo() if a &gt; b, otherwise it calls foo1()</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BasicsPage;","import React from \"react\";\r\n\r\nconst StringsPage = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"content-subtopic\">Multiline Strings</div>\r\n            Python allows us to declare multiline strings using \"\"\" or '''. Multiline strings keep line breaks as they were present while\r\n            declaring the string.\r\n            <div className=\"code-container\">\r\n                a = \r\n                <span className=\"string\"> \"\"\"This is the first line.<br/>\r\n                Notice how line breaks are preserved during printing.\"\"\"</span><br/>\r\n                <span className=\"function-call\">print</span>(a)<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                    Output:<br/>\r\n                    This is the first line.<br/>\r\n                    Notice how line breaks are preserved during printing.\r\n                </span><br/>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            After the first set of quotes, all whitespaces are preserved as they are present in the code. This means that if you create a \r\n            multiline string inside a function, if statement, or anything that requires indentation from Python interpreter, the tab spaces \r\n            will also be present in the string. For example:\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">def</span> foo():<br/>\r\n                &emsp;a = <span className=\"string\">'''First line<br/>\r\n                &emsp;&emsp;extra indented line<br/>\r\n                &emsp;function level indentation<br/>\r\n                no indentation<br/>\r\n                &emsp;'''\r\n                </span><br/><br/>\r\n                &emsp;<span className=\"function-call\">print</span>(a)<br/><br/>\r\n                <span className=\"function-call\">foo</span>()<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                    Output:<br/>\r\n                    First line<br/>\r\n                    &emsp;&emsp;extra indented line<br/>\r\n                    &emsp;function level indentation<br/>\r\n                    no indentation<br/>\r\n                </span><br/>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            If you want to define a string that spans multiple lines but does not retain whitespaces or line breaks, you can place \r\n            the string inside parenthesis. For example:\r\n            <div className=\"code-container\">\r\n                long_str = (<br/>\r\n                &emsp;<span className=\"string\">\"First string.\"<br/>\r\n                &emsp;\"Second string.\"<br/>\r\n                &emsp;&emsp;\"\\nNotice how tab does not affect the string\"<br/>\r\n                </span>\r\n                )<br/><br/>\r\n                <span className=\"function-call\">print</span>(long_str)<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                    Output:<br/>\r\n                    First string.Second string.<br/>\r\n                    Notice how tab does not affect the string\r\n                </span><br/>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            <div className=\"content-subtopic\">String Slicing</div>\r\n            String slicing follows the format of <code>string[start:end:jump]</code>.\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                s = <span className=\"string\">\"0123456789\"</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>s[:]<br/>\r\n                '0123456789'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>s[::<span className=\"number\">3</span>]<br/>\r\n                '0369'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>s[::<span className=\"number\">-2</span>]<br/>\r\n                '97531'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>s[<span className=\"number\">-5</span>:<span className=\"number\">-2</span>]<br/>\r\n                '567'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>s[<span className=\"number\">2</span>:<span className=\"number\">8</span>]<br/>\r\n                '234567'\r\n            </div>\r\n            <div className=\"content-subtopic\">Formatting Strings</div>\r\n            Python provides multiple ways to format strings, such as using the <code>%</code> operator for C-style string formatting, the \r\n            <code> format()</code> function, and formatted string literals (strings that start with <code>f</code> or <code>F</code>)\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                var1, var2, var3, var4 = \r\n                <span className=\"number\"> 10</span>,\r\n                <span className=\"string\"> '$'</span>,\r\n                <span className=\"number\"> 901.921049</span>,\r\n                <span className=\"string\"> ' exit'</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"string\">'int: %d, float: %f, char: %c, and string: %s' </span>% (var1, var3, var2, var4)<br/>\r\n                'int: 10, float: 901.921049, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"string\">'int: %d, float: %.2f, char: %c, and string: %s' </span>% (var1, var3, var2, var4)<br/>\r\n                'int: 10, float: 901.92, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"string\">'int: &#123;&#125;, float: &#123;&#125;, char: &#123;&#125;, and string: &#123;&#125;'</span>\r\n                .<span className=\"function-call\">format</span>(var1, var3, var2, var4)<br/>\r\n                'int: 10, float: 901.921049, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"string\">'int: &#123;&#125;, float: &#123;:.2f&#125;, char: &#123;&#125;, and string: &#123;&#125;'</span>\r\n                .<span className=\"function-call\">format</span>(var1, var3, var2, var4)<br/>\r\n                'int: 10, float: 901.92, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"string\">'int: &#123;0&#125;, float: &#123;2&#125;, char: &#123;1&#125;, and string: &#123;3&#125;'</span>\r\n                .<span className=\"function-call\">format</span>(var1, var2, var3, var4)<br/>\r\n                'int: 10, float: 901.921049, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"string\">'int: &#123;a&#125;, float: &#123;b&#125;, char: &#123;c&#125;, and string: &#123;d&#125;'</span>\r\n                .<span className=\"function-call\">format</span>(<span className=\"arg-param\">a</span>=var1, <span className=\"arg-param\">c</span>=var3, \r\n                <span className=\"arg-param\"> b</span>=var2, <span className=\"arg-param\">d</span>=var4)<br/>\r\n                'int: 10, float: 901.921049, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"format-keyword\">f</span>\r\n                <span className=\"string\">'int: </span>&#123; var1 &#125;<span className=\"string\">, float: </span>&#123; var3 &#125;<span className=\"string\">,\r\n                 char: </span>&#123; var2 &#125;<span className=\"string\">, and string: </span>&#123; var4 &#125;<span className=\"string\">'</span><br/>\r\n                'int: 10, float: 901.921049, char: $, and string:  exit'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"format-keyword\">F</span>\r\n                <span className=\"string\">'int: </span>&#123; var1 + <span className=\"number\">10</span> &#125;<span className=\"string\">, float: </span>\r\n                &#123; var3:<span className=\"format-keyword\">.2f</span> &#125;<span className=\"string\">, char: </span>&#123; var2 &#125;<span className=\"string\">, \r\n                and string: </span>&#123; var4.<span className=\"function-call\">upper</span>() &#125;<span className=\"string\">'</span><br/>\r\n                'int: 20, float: 901.92, char: $, and string:  EXIT'\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StringsPage;","import React from \"react\";\r\n\r\nconst ListsPage = () => {\r\n    return (\r\n        <div>\r\n            List indexing works the same as string slicing.\r\n            <div className=\"content-subtopic\">Changing Items</div>\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l = [<span className=\"number\">0</span>,<span className=\"number\"> 1</span>, <span className=\"number\"> 2</span>,\r\n                <span className=\"number\"> 3</span>,<span className=\"number\"> 4</span>,<span className=\"number\"> 5</span>,\r\n                <span className=\"number\"> 6</span>,<span className=\"number\"> 7</span>,<span className=\"number\"> 8</span>,<span className=\"number\"> 9</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l[<span className=\"number\">2</span>:<span className=\"number\">5</span>] = [\r\n                    <span className=\"string\">'2'</span>,<span className=\"string\"> '3'</span>,<span className=\"string\"> '4'</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0, 1, '2', '3', '4', 5, 6, 7, 8, 9]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l[<span className=\"number\">6</span>:<span className=\"number\">8</span>] = [\r\n                    <span className=\"string\">'6'</span>,<span className=\"string\"> '7'</span>,<span className=\"number\"> 7.5</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0, 1, '2', '3', '4', 5, '6', '7', 7.5, 8, 9]\r\n            </div>\r\n            <div className=\"content-subtopic\">Adding Items</div>\r\n            The <code>extend()</code> function allows us to add any iterable object to a list.\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l = [<span className=\"number\">0</span>,<span className=\"number\"> 1</span>, <span className=\"number\"> 2</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l.<span className=\"function-call\">extend</span>([<span className=\"number\">3</span>,<span className=\"number\"> 4</span>])<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0, 1, 2, 3, 4]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l.<span className=\"function-call\">extend</span>((<span className=\"number\">5</span>,<span className=\"number\"> 6</span>))<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0, 1, 2, 3, 4, 5, 6]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l.<span className=\"function-call\">extend</span>(&#123;<span className=\"number\">7</span>:<span className=\"string\"> 'a'</span>,\r\n                <span className=\"number\"> 8</span>:<span className=\"string\"> 'b'</span>&#125;)<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<span className=\"comment\"> # note how only keys are added to the list</span><br/>\r\n                [0, 1, 2, 3, 4, 5, 6, 7, 8]\r\n            </div>\r\n            <div className=\"content-subtopic\">Removing Items</div>\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l = [<span className=\"number\">0</span>,<span className=\"number\"> 3</span>,<span className=\"number\"> 2</span>,<span className=\"number\"> 3</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l.<span className=\"function-call\">remove</span>(<span className=\"number\">3</span>)<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0, 2, 3]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l.<span className=\"function-call\">pop</span>(<span className=\"number\">1</span>)<br/>\r\n                2<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0, 3]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"keyword\">del </span>l[<span className=\"number\">1</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>l<br/>\r\n                [0]<br/>\r\n            </div>\r\n            <div className=\"content-subtopic\">Custom Sorting</div>\r\n            <div className=\"code-container\">\r\n            <span className=\"keyword-italics\">def</span> custom_sort(<span className=\"arg-param\">item</span>):<br/>\r\n            &emsp;<span className=\"keyword\">return </span>item % <span className=\"number\">5</span><br/><br/>\r\n            l = [<span className=\"number\">78</span>,<span className=\"number\"> 90</span>, <span className=\"number\"> 1</span>,\r\n                <span className=\"number\"> -9</span>,<span className=\"number\"> 57</span>,<span className=\"number\"> 22</span>]<br/>\r\n            l.<span className=\"function-call\">sort</span>(<span className=\"arg-param\">key</span>=custom_sort)<br/>\r\n            <span className=\"function-call\">print</span>(l)\r\n            <span className=\"comment\"> # prints: [90, 1, -9, 57, 22, 78]</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListsPage;","import React from \"react\";\r\n\r\nconst TuplesPage = () => {\r\n    return (\r\n        <div>\r\n            Tuples are ordered and immutable. Due to their immutability, accessing elements in tuples is a lot quicker than accessing \r\n            element in a list. Tuples also require less space. Tuple indexing works the same as string slicing.<br/><br/>\r\n            Tuples have only two methods: <code>count()</code> and <code>index()</code>. These work the same as their <code>list</code> counterparts.<br/>\r\n            <div className=\"content-subtopic\">Creating Tuples</div>\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                t = (<span className=\"number\">1</span>, )\r\n                <span className=\"comment\"> # the comma defines t as a tuple</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                t = (<span className=\"number\">1</span>)\r\n                <span className=\"comment\"> # here, t is of type int</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"typecast\">tuple</span>(i <span className=\"keyword\">for </span>i <span className=\"keyword\">in </span>\r\n                <span className=\"function-call\">range</span>(<span className=\"number\">5</span>))\r\n                <span className=\"comment\"> # similar to list comprehension, tuple comprehension also exists.</span><br/>\r\n                (0, 1, 2, 3, 4)<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                (i <span className=\"keyword\">for </span>i <span className=\"keyword\">in </span><span className=\"function-call\">range</span>\r\n                (<span className=\"number\">5</span>))\r\n                <span className=\"comment\"> # note that if we do not typecast the comprehension, we do not get a tuple</span><br/>\r\n                &lt;generator object &lt;genexpr&gt; at 0x0000019323DD9510&gt;\r\n            </div>\r\n            <div className=\"content-subtopic\">Adding Elements</div>\r\n            While we cannot change a tuple, and hence cannot add elements to a pre-existing tuple, we can add two or more tuples to create\r\n            a new tuple. We can also multiply (<code>*</code>) tuples to create new tuples.\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                (<span className=\"number\">1</span>,<span className=\"number\"> 2</span>) + (<span className=\"number\">3</span>,<span className=\"number\"> 4</span>)<br/>\r\n                (1, 2, 3, 4)<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                (<span className=\"number\">1</span>,<span className=\"number\"> 2</span>) * <span className=\"number\">5</span><br/>\r\n                (1, 2, 1, 2, 1, 2, 1, 2, 1, 2)\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TuplesPage;","import React from \"react\";\r\n\r\nconst DictionariesPage = () => {\r\n    return (\r\n        <div>\r\n            Dictionaries are ordered as of Python 3.7. In Python 3.6 and earlier, dictionaries are undordered.<br/>\r\n            <div className=\"content-subtopic\">Dictionary Comprehension</div>\r\n            Dictionaries can also be created using dictionary comprehension, similar to list comprehension.\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                &#123; k: v <span className=\"keyword\">for </span>(k, v)<span className=\"keyword\"> in </span>\r\n                <span className=\"function-call\">zip</span>((<span className=\"string\">'a'</span>,<span className=\"string\"> 'b'</span>),\r\n                (<span className=\"number\">1</span>,<span className=\"number\"> 2</span>)) &#125;<br/>\r\n                &#123;'a': 1, 'b': 2&#125;<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                l = [<span className=\"string\">'a'</span>,<span className=\"string\"> 'b'</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                &#123; i: l[i] <span className=\"keyword\">for </span>i<span className=\"keyword\"> in </span>\r\n                <span className=\"function-call\">range</span>(<span className=\"function-call\">len</span>(l)) &#125;<br/>\r\n                &#123;0: 'a', 1: 'b'&#125;<br/>\r\n            </div>\r\n            <div className=\"content-subtopic\">Accessing Values</div>\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                d = &#123;<span className=\"number\">0</span>:<span className=\"string\"> 'a'</span>,\r\n                <span className=\"number\"> 1</span>:<span className=\"string\"> 'b'</span>&#125;<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                d.<span className=\"function-call\">keys</span>() \r\n                <span className=\"comment\"> # this does not return a list, if you want a list you can typecast as such</span><br/>\r\n                dict_keys([0, 1])<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"typecast\">list</span>(d.<span className=\"function-call\">keys</span>())<br/>\r\n                [0, 1]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                <span className=\"typecast\">tuple</span>(d.<span className=\"function-call\">keys</span>())<br/>\r\n                (0, 1)<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d.<span className=\"function-call\">values</span>()\r\n                <span className=\"comment\"> # similarly, you can typecast the result to list or tuple</span><br/>\r\n                dict_values(['a', 'b'])<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>x = d.<span className=\"function-call\">items</span>()<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>x<br/>\r\n                dict_items([(0, 'a'), (1, 'b')])<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d[<span className=\"number\">2</span>] = <span className=\"string\">'c'</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>x\r\n                <span className=\"comment\"> # note how x updates automatically</span><br/>\r\n                dict_items([(0, 'a'), (1, 'b'), (2, 'c')])<br/>\r\n            </div>\r\n            <div className=\"content-subtopic\">Deleting Values</div>\r\n            <div className=\"code-container\">\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                d = &#123;<span className=\"number\">0</span>:<span className=\"string\"> 'a'</span>,\r\n                <span className=\"number\"> 1</span>:<span className=\"string\"> 'b'</span>&#125;<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                d.<span className=\"function-call\">pop</span>(<span className=\"number\">1</span>)<br/>\r\n                'b'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d<br/>\r\n                &#123;0: 'a'&#125;<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>\r\n                d.<span className=\"function-call\">pop</span>(<span className=\"number\">1</span>, <span className=\"string\">'no'</span>)<br/>\r\n                'no'<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d[<span className=\"number\">2</span>] = <span className=\"string\">'c'</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d.<span className=\"function-call\">popitem</span>()\r\n                <span className=\"comment\"> # removes and returns the last item that was added</span><br/>\r\n                (2, 'c')<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d[<span className=\"number\">3</span>] = <span className=\"string\">'d'</span><br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span><span className=\"keyword\">del </span>d[<span className=\"number\">3</span>]<br/>\r\n                <span className=\"arrow\">&gt;&gt;&gt; </span>d.<span className=\"function-call\">clear</span>()\r\n            </div>\r\n            <div className=\"content-subtopic\">Misc. Methods</div>\r\n            <div className=\"code-container\">\r\n                d = <span className=\"literal\">None</span><br/>\r\n                keys = (<span className=\"number\">1</span>, <span className=\"number\">2</span>, <span className=\"number\">3</span>)<br/>\r\n                values = (<span className=\"string\">'a'</span>, <span className=\"string\">'b'</span>)<br/>\r\n                d = <span className=\"typecast\">dict</span>.<span className=\"function-call\">fromkeys</span>(keys, values)<br/>\r\n                <span className=\"function-call\">print</span>(d)<br/><br/>\r\n                <span className=\"function-call\">print</span>(d.<span className=\"function-call\">setdefault</span>(\r\n                    <span className=\"number\">1</span>, <span className=\"string\">'a'</span>\r\n                ))<br/>\r\n                <span className=\"function-call\">print</span>(d.<span className=\"function-call\">setdefault</span>(\r\n                    <span className=\"number\">4</span>, <span className=\"string\">'b'</span>\r\n                ))<br/>\r\n                <span className=\"function-call\">print</span>(d)<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                &#123;1: ('a', 'b'), 2: ('a', 'b'), 3: ('a', 'b')&#125;<br/>\r\n                ('a', 'b')<br/>\r\n                b<br/>\r\n                &#123;1: ('a', 'b'), 2: ('a', 'b'), 3: ('a', 'b'), 4: 'b'&#125;<br/>\r\n                </span>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DictionariesPage;","import React from \"react\";\r\n\r\nconst FunctionsPage = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"content-subtopic\">Parameters & Arguments</div>\r\n            Positional parameters must be placed before keyword parameters. Similarly, when passing arguments, positional \r\n            arguments must be passed before keyword arguments.\r\n            <div className=\"code-container\">\r\n                <span className=\"comment\"># this will give us a SyntaxError</span><br/>\r\n                <span className=\"keyword-italics\">def</span> foo(\r\n                    <span className=\"arg-param\">a</span>=<span className=\"number\">10</span>,\r\n                    <span className=\"arg-param\"> b</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"keyword\">pass</span><br/><br/>\r\n                <span className=\"keyword-italics\">def</span> foo1(\r\n                    <span className=\"arg-param\">a</span>,\r\n                    <span className=\"arg-param\"> b</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"keyword\">pass</span><br/><br/>\r\n                <span className=\"function-call\">foo1</span>(\r\n                    <span className=\"arg-param\">b</span>=<span className=\"number\">1</span>,\r\n                    <span className=\"number\"> 10</span>\r\n                )\r\n                <span className=\"comment\"> # assuming foo() does not exist, this will give us a SyntaxError</span>\r\n            </div>\r\n            Python also supports variable number arguments, both of type positional and keyword.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">def</span> foo(\r\n                    <span className=\"arg-param\">*args</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(args)<br/><br/>\r\n                <span className=\"keyword-italics\">def</span> foo1(\r\n                    <span className=\"arg-param\">**kwargs</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(kwargs)<br/><br/>\r\n                <span className=\"function-call\">foo</span>(\r\n                    <span className=\"number\">12</span>, <span className=\"string\">'a'</span>, <span className=\"number\">90.123</span>\r\n                )<br/>\r\n                <span className=\"function-call\">foo1</span>(\r\n                    <span className=\"arg-param\">a</span>=<span className=\"number\">12</span>,\r\n                    <span className=\"arg-param\"> b</span>=<span className=\"string\">'a'</span>,\r\n                    <span className=\"arg-param\"> c</span>=<span className=\"number\">90.123</span>\r\n                )<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                    Output:<br/>\r\n                    (12, 'a', 90.123)<br/>\r\n                    &#123;'a': 12, 'b': 'a', 'c': 90.123&#125;\r\n                </span><br/>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            Instead of passing individual values to functions, we can also unpack iterable objects to pass parameters.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">def</span> foo(\r\n                    <span className=\"arg-param\">a</span>,<span className=\"arg-param\"> b</span>,<span className=\"arg-param\"> c</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(a, b, c)<br/><br/>\r\n                <span className=\"function-call\">foo</span>(*[<span className=\"number\">12</span>,<span className=\"number\"> 3</span>,<span className=\"number\"> 9</span>])<br/>\r\n                <span className=\"function-call\">foo</span>(*(<span className=\"number\">12</span>,<span className=\"string\"> 'a'</span>,<span className=\"number\"> 2</span>))<br/>\r\n                <span className=\"function-call\">foo</span>(**&#123;\r\n                    <span className=\"string\">'a'</span>: <span className=\"number\">1</span>,\r\n                    <span className=\"string\"> 'c'</span>: <span className=\"number\">2</span>,\r\n                    <span className=\"string\"> 'b'</span>: <span className=\"number\">3</span>\r\n                    &#125;)<br/><br/>\r\n                    <span className=\"string\">\"\"\"</span><br/>\r\n                    <span className=\"comment\">\r\n                        Output:<br/>\r\n                        12 3 9<br/>\r\n                        12 a 2<br/>\r\n                        1 3 2\r\n                    </span><br/>\r\n                    <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            <div className=\"content-subtopic\">Type Hinting</div>\r\n            Python is a dynamically typed language, meaning that variables are not restricted to any one specific data type. This means\r\n            that users are free to pass whatever data they wish to functions, even if the function was not created to handle that data type.\r\n            To indicate what data was expected to be passed, functions would require proper documentation to show what was expected. However, \r\n            with the introduction of <a href=\"https://www.python.org/dev/peps/pep-0484/\">PEP 484</a>, we can easily use type hinting &mdash;\r\n            a more succinct way of indicating the datatypes of functions parameters.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword\">from</span> typing <span className=\"keyword\">import</span> TypeVar<br/><br/>\r\n                T = <span className=\"function-call\">TypeVar</span>(<span className=\"string\">'T'</span>,\r\n                <span className=\"typecast\"> int</span>, <span className=\"typecast\"> float</span>)<br/><br/>\r\n                <span className=\"keyword-italics\">def</span> add(\r\n                    <span className=\"arg-param\">a</span>: T,<span className=\"arg-param\"> b</span>: T):<br/>\r\n                &emsp;<span className=\"function-call\">print</span>(a + b)<br/><br/>\r\n                <span className=\"keyword-italics\">def</span> print_list(\r\n                    <span className=\"arg-param\">l</span>: <span className=\"typecast\">list</span>):<br/>\r\n                &emsp;<span className=\"keyword\">for</span> i <span className=\"keyword\">in</span> l:<br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(i, <span className=\"arg-param\">end</span>=<span className=\"string\">' '</span>)<br/>\r\n                &emsp;<span className=\"function-call\">print</span>()<br/><br/>\r\n                <span className=\"keyword-italics\">def</span> foo(<span className=\"arg-param\">a</span>:<span className=\"typecast\"> int</span>)\r\n                -&gt; <span className=\"typecast\">str</span>:<br/>\r\n                &emsp;<span className=\"keyword\">return</span><span className=\"function-call\"> chr</span>(a)\r\n            </div>\r\n            The above code snippet shows different ways in which we can utilise type hinting. The functions <code>print_list()</code> and\r\n            <code> foo()</code> show how to do type hinting without using any modules. We define the parameters <code>l</code> and <code>a</code> as\r\n            datatype of <code> list</code> and <code>int</code>, respectively. Furthermore, the function <code>foo()</code> defines the datatype\r\n            of the return value as <code>str</code>.<br/>\r\n            Function <code>add</code> shows how we can utilise the typing module to define more complex type hintings. <code>T</code> defines\r\n            a type hinting that would indicate that the parameter should only be of type <code>int</code> or <code>float</code>.<br/>\r\n            While type hinting does not force users to pass arguments of the defined type, it makes it easier for people reading or using these functions\r\n            to understand what exactly the functions requires from the user and what it returns. To better utilise the functionalities of\r\n            type hinting, it is recommended to use static typing linters such as <a href=\"https://github.com/python/mypy\">mypy</a>.\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FunctionsPage;","import React from \"react\";\r\n\r\nconst ClassesPage = () => {\r\n    return(\r\n        <div>\r\n            <div className=\"content-subtopic\">Multiple Inheritance</div>\r\n            Not only does Python support multi-level Inheritance, it also supports multiple inheritance. The problem with multiple inheritance\r\n            however is method overriding. If two inherited classes contain a common method <code>foo()</code>, which one will be inherited?\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword-italics\">class</span><span className=\"typecast\"> Base1</span>:<br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"class-key\">self</span>.__val = <span className=\"number\">10</span><br/><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> override</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"In Base1\"</span>,\r\n                <span className=\"class-key\"> self</span>.__val)<br/><br/>\r\n                <span className=\"keyword-italics\">class</span><span className=\"typecast\"> Base2</span>:<br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"class-key\">self</span>.__val = <span className=\"number\">-10</span><br/><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> override</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"In Base2\"</span>,\r\n                <span className=\"class-key\"> self</span>.__val)<br/><br/>\r\n                <span className=\"keyword-italics\">class</span><span className=\"typecast\"> Child1</span>(\r\n                    <span className=\"class-key\">Base1</span>,<span className=\"class-key\"> Base2</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;Base1.<span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;Base2.<span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"class-key\">self</span>.val = <span className=\"number\">1</span><br/><br/>\r\n                <span className=\"keyword-italics\">class</span><span className=\"typecast\"> Child2</span>(\r\n                    <span className=\"class-key\">Base2</span>,<span className=\"class-key\"> Base1</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;Base1.<span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;Base2.<span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"class-key\">self</span>.val = <span className=\"number\">2</span><br/><br/>\r\n                child1, child2 = <span className=\"function-call\">Child1</span>(), <span className=\"function-call\">Child2</span>()<br/><br/>\r\n                <span className=\"function-call\">print</span>(<span className=\"string\">\"Child1:\"</span>)<br/>\r\n                child1.<span className=\"function-call\">override</span>()<br/>\r\n                <span className=\"function-call\">print</span>(child1.val, child1._Base1__val, child1._Base2__val)<br/>\r\n                <span className=\"function-call\">print</span>()<br/>\r\n                <span className=\"function-call\">print</span>(<span className=\"string\">\"Child2:\"</span>)<br/>\r\n                child2.<span className=\"function-call\">override</span>()<br/>\r\n                <span className=\"function-call\">print</span>(child2.val, child2._Base1__val, child2._Base2__val)<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                    Output:<br/>\r\n                    Child1:<br/>\r\n                    In Base1: 10<br/>\r\n                    1 10 -10<br/><br/>\r\n                    Child2:<br/>\r\n                    In Base2: -10<br/>\r\n                    2 10 -10\r\n                </span><br/>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            The above code shows how methods are resolved during multiple inheritance. The two base classes have a common method:\r\n            <code> override()</code>, so when that method is called by the child classes Python chooses the method of the class that\r\n            was inherited first.<br/>\r\n            On top of that, the above code shows how name mangling works in Python. Name mangling is a way to avoid easily overriding parent\r\n            class attributes/methods. By adding \"__\" in front of an attribute or method, it allows child classes to have attributes and methods\r\n            of the same name without overriding it.\r\n            <div className=\"content-subtopic\">Abstract Classes</div>\r\n            Any method defined in an abstract class must be overriden by the inheriting class.\r\n            <div className=\"code-container\">\r\n                <span className=\"keyword\">from</span> abc <span className=\"keyword\">import</span> ABCMeta, abstractmethod<br/><br/>\r\n                <span className=\"keyword-italics\">class</span><span className=\"typecast\"> Abstract</span>(\r\n                    <span className=\"typecast\">metaclass</span>=<span className=\"class-key\">ABCMeta</span>\r\n                ):<br/>\r\n                &emsp;<span className=\"decorators\">@abstractmethod</span><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> foo</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"keyword\">pass</span><br/><br/>\r\n                &emsp;<span className=\"decorators\">@property</span><br/>\r\n                &emsp;<span className=\"decorators\">@abstractmethod</span><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> val</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"keyword\">pass</span><br/><br/>\r\n                <span className=\"keyword-italics\">class</span><span className=\"typecast\"> Base</span>(\r\n                <span className=\"class-key\">Abstract</span>):<br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> __init__</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"class-key\">self</span>._val = <span className=\"number\">10</span><br/><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> foo</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"function-call\">print</span>(<span className=\"string\">\"Abstract method overriden\"</span>)<br/><br/>\r\n                &emsp;<span className=\"decorators\">@property</span><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> val</span>(<span className=\"class-key\">self</span>):<br/>\r\n                &emsp;&emsp;<span className=\"keyword\">return </span><span className=\"class-key\">self</span>._val<br/><br/>\r\n                &emsp;<span className=\"decorators\">@val.setter</span><br/>\r\n                &emsp;<span className=\"keyword-italics\">def</span>\r\n                <span className=\"function-call\"> val</span>(<span className=\"class-key\">self</span>, <span className=\"arg-param\">value</span>):<br/>\r\n                &emsp;&emsp;<span className=\"class-key\">self</span>._val = value<br/><br/>\r\n                b = <span className=\"function-call\">Base</span>()<br/>\r\n                b.<span className=\"function-call\">foo</span>()<br/>\r\n                <span className=\"function-call\">print</span>(b.val)<br/>\r\n                b.val = <span className=\"number\">99</span><br/>\r\n                <span className=\"function-call\">print</span>(b.val)<br/><br/>\r\n                <span className=\"string\">\"\"\"</span><br/>\r\n                <span className=\"comment\">\r\n                    Output:<br/>\r\n                    Asbtract method overriden<br/>\r\n                    10<br/>\r\n                    99\r\n                </span><br/>\r\n                <span className=\"string\">\"\"\"</span>\r\n            </div>\r\n            This code also shows the use of <code>@property</code> and <code>@attribute.setter</code> annotations to create getter and setter\r\n            methods for class attributes.\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ClassesPage;","import React from \"react\";\r\n\r\nconst PageContentHeader = (props) => {\r\n    const handleClick = () => {\r\n        props.hidePage();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p id=\"top\"><span className=\"link\" onClick={ handleClick }>&lt; Go Back</span></p>\r\n            <h1 className=\"display-2 fw-bold text-decoration-underline\">{ props.children }</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageContentHeader;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport BasicsPage from './ContentPages/BasicsPage';\r\nimport StringsPage from './ContentPages/StringsPage';\r\nimport ListsPage from \"./ContentPages/ListsPage\";\r\nimport TuplesPage from \"./ContentPages/TuplesPage\";\r\nimport DictionariesPage from \"./ContentPages/DictionariesPage\";\r\nimport FunctionsPage from \"./ContentPages/FunctionsPage\";\r\nimport ClassesPage from \"./ContentPages/ClassesPage\";\r\nimport PageContentHeader from \"./PageContentHeader\";\r\nimport './Page.css';\r\n\r\nconst PageContainer = (props) => {\r\n    const [ pageInit, setPageInit ] = useState(false);\r\n    const [ showFloatingButton, setShowFloatingButton ] = useState(false);\r\n    const scrollRef = useRef(0);\r\n\r\n    useEffect(() => {\r\n        const timeoutID = setTimeout(() => {\r\n            setPageInit(true);\r\n        }, 100);\r\n\r\n        return () => {\r\n            if (timeoutID)\r\n                clearTimeout(timeoutID);\r\n        };\r\n    }, []);\r\n\r\n    const handleHidePage = () => {\r\n        setPageInit(false);\r\n\r\n        const timeoutID = setTimeout(() => {\r\n            props.hidePage({\r\n                showPage: false,\r\n                subject: null\r\n            });\r\n\r\n            return () => {\r\n                if (timeoutID)\r\n                    clearTimeout(timeoutID);\r\n            };\r\n        }, 500);\r\n    };\r\n\r\n    const handleOnScroll = ({ target }) => {\r\n        let b = document.body;\r\n        let currScroll = ((target.scrollTop || b[\"scrollTop\"]) / ((target.scrollHeight || b[\"scrollHeight\"]) - target.clientHeight)) * 100;\r\n\r\n        if (scrollRef.current - currScroll > 0)\r\n        {\r\n            scrollRef.current = currScroll;\r\n            setShowFloatingButton(true);\r\n        }\r\n        else\r\n        {\r\n            scrollRef.current = currScroll;\r\n            setShowFloatingButton(false);\r\n        }\r\n    };\r\n\r\n    const renderPage = (page) => {\r\n        switch (page)\r\n        {\r\n            case \"Basics\" : return <BasicsPage />;\r\n            case \"Strings\" : return <StringsPage />;\r\n            case \"Lists\" : return <ListsPage />;\r\n            case \"Tuples\": return <TuplesPage />;\r\n            case \"Dictionaries\": return <DictionariesPage />;\r\n            case \"Functions\": return <FunctionsPage />;\r\n            case \"Classes\": return <ClassesPage />;\r\n\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            id=\"page-container\" \r\n            className={ pageInit ? \"page-container\" : \"page-container-hide\" } \r\n            onScroll={handleOnScroll}>\r\n            <div className=\"page-content-container\">\r\n                <PageContentHeader hidePage={ handleHidePage }>{ props.subject }</PageContentHeader>\r\n                { renderPage(props.subject) }\r\n                <a \r\n                    href=\"#top\" \r\n                    className={showFloatingButton ? \"floating-button-container\" : \"floating-button-container-hide\" }>\r\n                    <button className=\"floating-button\">\r\n                        <span className=\"material-icons\">arrow_upward</span>\r\n                    </button>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageContainer;","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MainTopic from \"./MainTopic/MainTopic\";\r\nimport SubtopicsContainer from \"./SubtopicsContainer/SubtopicsContainer\";\r\nimport PageContainer from \"./PageContainer/PageContainer\";\r\nimport './index.css';\r\n\r\nconst secondaryBgColour = \"rgb(0, 0, 51)\";\r\n\r\nconst Root = () => {\r\n    const [ mainActive, setMainActive ] = useState(true);\r\n    const [ page, setPage ] = useState({ showPage: false, subject: null });\r\n\r\n    const handleMainActive = (val) => {\r\n        document.body.style.backgroundColor = secondaryBgColour;\r\n        setMainActive(val);\r\n    };\r\n\r\n    const handlePage = (val) => {\r\n        setPage(val);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            { page.showPage && <PageContainer subject={ page.subject } hidePage={ handlePage } /> }\r\n            { mainActive && <MainTopic mainActive={ handleMainActive }/> }\r\n            { !mainActive && <SubtopicsContainer showPage={ handlePage } /> }\r\n        </div>\r\n    );\r\n};\r\n\r\nReactDOM.render(<Root/>, document.getElementById(\"root\"));"],"sourceRoot":""}